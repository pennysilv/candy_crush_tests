#!/usr/bin/env python3
"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ Candy Crush Saga
"""

import subprocess
import sys
import os
import argparse
from datetime import datetime

def run_tests(test_suite="all", html_report=True, verbose=True):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    
    print("üéÆ Candy Crush Saga - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    reports_dir = "reports"
    if not os.path.exists(reports_dir):
        os.makedirs(reports_dir)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Ç–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—Ç—å
    test_files = {
        "all": ["tests/"],
        "stability": ["tests/test_app_stability.py"],
        "interactions": ["tests/test_screen_interactions.py"],
        "performance": ["tests/test_performance.py"],
        "visual": ["tests/test_visual_validation.py"],
        "full_suite": ["tests/test_app_stability.py", "tests/test_screen_interactions.py", "tests/test_performance.py", "tests/test_visual_validation.py"]
    }
    
    if test_suite not in test_files:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤: {test_suite}")
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–±–æ—Ä—ã: {list(test_files.keys())}")
        return False
    
    files_to_test = test_files[test_suite]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # –ë–∞–∑–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ pytest
    cmd = ["pytest"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    cmd.extend(files_to_test)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–≤–æ–¥–∞
    if verbose:
        cmd.extend(["-v", "-s"])  # verbose –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å print'—ã
    
    # HTML –æ—Ç—á–µ—Ç
    if html_report:
        report_file = f"{reports_dir}/test_report_{test_suite}_{timestamp}.html"
        cmd.extend([f"--html={report_file}", "--self-contained-html"])
        print(f"üìä HTML –æ—Ç—á–µ—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    cmd.extend([
        "--tb=short",  # –∫–æ—Ä–æ—Ç–∫–∏–π traceback
        "-q",  # —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º –¥–ª—è –º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        f"--maxfail=10"  # –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Å–ª–µ 10 –æ—à–∏–±–æ–∫
    ])
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤: {test_suite}")
    print(f"üìÅ –§–∞–π–ª—ã: {files_to_test}")
    print("-" * 60)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        result = subprocess.run(cmd, capture_output=False)
        
        print("-" * 60)
        if result.returncode == 0:
            print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        elif result.returncode == 1:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã —É–ø–∞–ª–∏")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤")
        
        if html_report:
            print(f"üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç: {os.path.abspath(report_file)}")
        
        return result.returncode == 0
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: {e}")
        return False

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Appium —Å–µ—Ä–≤–µ—Ä (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    try:
        import socket
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(3)
        result = sock.connect_ex(('localhost', 4723))
        sock.close()
        
        if result == 0:
            print("‚úÖ Appium —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 4723")
        else:
            print("‚ùå Appium —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: appium --port 4723")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Appium: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    try:
        result = subprocess.run(["adb", "devices"], capture_output=True, text=True)
        if "device" in result.stdout:
            print("‚úÖ Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ")
        else:
            print("‚ùå Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
    except:
        print("‚ùå ADB –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    try:
        result = subprocess.run(
            ["adb", "shell", "pm", "list", "packages", "com.king.candycrushsaga"], 
            capture_output=True, text=True
        )
        if "com.king.candycrushsaga" in result.stdout:
            print("‚úÖ Candy Crush Saga —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            print("‚ùå Candy Crush Saga –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        return False
    
    print("‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!")
    return True

def main():
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Candy Crush Saga")
    parser.add_argument(
        "--suite", 
        choices=["all", "stability", "interactions", "performance", "visual", "full_suite"],
        default="stability",
        help="–ù–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞"
    )
    parser.add_argument("--no-html", action="store_true", help="–ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å HTML –æ—Ç—á–µ—Ç")
    parser.add_argument("--quiet", action="store_true", help="–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º")
    parser.add_argument("--check-env", action="store_true", help="–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
    
    args = parser.parse_args()
    
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if args.check_env:
        success = check_environment()
        sys.exit(0 if success else 1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤
    if not check_environment():
        print("\n‚ùå –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    success = run_tests(
        test_suite=args.suite,
        html_report=not args.no_html,
        verbose=not args.quiet
    )
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
