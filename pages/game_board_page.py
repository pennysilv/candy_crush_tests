"""
Page Object –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è Candy Crush Saga
"""

from appium.webdriver.common.appiumby import AppiumBy
from .base_page import BasePage

class GameBoardPage(BasePage):
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–æ–≤—ã–º –ø–æ–ª–µ–º"""
    
    # –õ–æ–∫–∞—Ç–æ—Ä—ã –∏–≥—Ä–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    GAME_BOARD_LOCATORS = [
        (AppiumBy.XPATH, "//*[contains(@resource-id, 'game') or contains(@resource-id, 'board')]"),
        (AppiumBy.XPATH, "//*[contains(@class, 'game') or contains(@class, 'board')]"),
        (AppiumBy.XPATH, "//*[contains(@content-desc, 'game') or contains(@content-desc, 'board')]"),
    ]
    
    MOVES_COUNTER_LOCATORS = [
        (AppiumBy.XPATH, "//*[contains(@text, 'Moves') or contains(@text, 'moves')]"),
        (AppiumBy.XPATH, "//*[contains(@resource-id, 'moves')]"),
        (AppiumBy.XPATH, "//*[contains(@content-desc, 'moves')]"),
    ]
    
    SCORE_LOCATORS = [
        (AppiumBy.XPATH, "//*[contains(@text, 'Score') or contains(@text, 'score')]"),
        (AppiumBy.XPATH, "//*[contains(@resource-id, 'score')]"),
        (AppiumBy.XPATH, "//*[contains(@content-desc, 'score')]"),
    ]
    
    PAUSE_BUTTON_LOCATORS = [
        (AppiumBy.XPATH, "//*[contains(@content-desc, 'pause') or contains(@content-desc, 'Pause')]"),
        (AppiumBy.XPATH, "//*[contains(@text, 'Pause')]"),
        (AppiumBy.XPATH, "//*[contains(@resource-id, 'pause')]"),
    ]
    
    def __init__(self, driver):
        super().__init__(driver)
        
    def is_displayed(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è"""
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è...")
        
        # –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
        game_board = self.find_game_board()
        moves_counter = self.find_moves_counter()
        score = self.find_score()
        
        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –∏–≥—Ä—ã
        is_displayed = any([game_board, moves_counter, score])
        
        if is_displayed:
            print("‚úÖ –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
        else:
            print("‚ùå –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
        return is_displayed
    
    def find_game_board(self):
        """–ù–∞–π—Ç–∏ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ"""
        print("üîç –ò—â–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ...")
        
        for i, (by, value) in enumerate(self.GAME_BOARD_LOCATORS):
            element = self.find_element(by, value, timeout=3)
            if element:
                print(f"‚úÖ –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –Ω–∞–π–¥–µ–Ω–æ —Å–ø–æ—Å–æ–±–æ–º {i+1}")
                return element
                
        print("‚ùå –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return None
    
    def find_moves_counter(self):
        """–ù–∞–π—Ç–∏ —Å—á–µ—Ç—á–∏–∫ —Ö–æ–¥–æ–≤"""
        print("üîç –ò—â–µ–º —Å—á–µ—Ç—á–∏–∫ —Ö–æ–¥–æ–≤...")
        
        for i, (by, value) in enumerate(self.MOVES_COUNTER_LOCATORS):
            element = self.find_element(by, value, timeout=3)
            if element:
                print(f"‚úÖ –°—á–µ—Ç—á–∏–∫ —Ö–æ–¥–æ–≤ –Ω–∞–π–¥–µ–Ω —Å–ø–æ—Å–æ–±–æ–º {i+1}")
                return element
                
        print("‚ùå –°—á–µ—Ç—á–∏–∫ —Ö–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    def find_score(self):
        """–ù–∞–π—Ç–∏ —Å—á–µ—Ç"""
        print("üîç –ò—â–µ–º —Å—á–µ—Ç...")
        
        for i, (by, value) in enumerate(self.SCORE_LOCATORS):
            element = self.find_element(by, value, timeout=3)
            if element:
                print(f"‚úÖ –°—á–µ—Ç –Ω–∞–π–¥–µ–Ω —Å–ø–æ—Å–æ–±–æ–º {i+1}")
                return element
                
        print("‚ùå –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    def get_moves_count(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ö–æ–¥–æ–≤"""
        moves_element = self.find_moves_counter()
        if moves_element:
            try:
                moves_text = moves_element.get_attribute('text') or ''
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
                import re
                numbers = re.findall(r'\d+', moves_text)
                if numbers:
                    moves = int(numbers[0])
                    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤: {moves}")
                    return moves
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–æ–¥–æ–≤: {e}")
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤")
        return None
    
    def get_score(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç"""
        score_element = self.find_score()
        if score_element:
            try:
                score_text = score_element.get_attribute('text') or ''
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
                import re
                numbers = re.findall(r'[\d,]+', score_text)
                if numbers:
                    # –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—ã–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ
                    score = int(numbers[0].replace(',', ''))
                    print(f"üìä –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: {score}")
                    return score
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç–∞: {e}")
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—á–µ—Ç")
        return None
    
    def make_random_move(self):
        """–°–¥–µ–ª–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ö–æ–¥ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ"""
        print("üéÆ –ü—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ö–æ–¥...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
        size = self.driver.get_window_size()
        
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –∑–∞–Ω–∏–º–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞
        center_x = size['width'] // 2
        center_y = size['height'] // 2
        
        # –î–µ–ª–∞–µ–º —Å–≤–∞–π–ø –≤ —Ü–µ–Ω—Ç—Ä–µ —ç–∫—Ä–∞–Ω–∞ (–∏–º–∏—Ç–∞—Ü–∏—è —Ö–æ–¥–∞)
        start_x = center_x - 50
        start_y = center_y
        end_x = center_x + 50
        end_y = center_y
        
        try:
            self.driver.swipe(start_x, start_y, end_x, end_y, 500)
            print("‚úÖ –°–¥–µ–ª–∞–ª–∏ —Å–≤–∞–π–ø –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–∞–π–ø–µ: {e}")
            return False
    
    def click_pause(self):
        """–ö–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–∞—É–∑—ã"""
        print("‚è∏Ô∏è –ü—ã—Ç–∞–µ–º—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É...")
        
        for i, (by, value) in enumerate(self.PAUSE_BUTTON_LOCATORS):
            if self.click_element(by, value, timeout=3):
                print(f"‚úÖ –ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –ø–∞—É–∑—É —Å–ø–æ—Å–æ–±–æ–º {i+1}")
                return True
                
        print("‚ùå –ö–Ω–æ–ø–∫–∞ –ø–∞—É–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    def get_game_state_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã"""
        info = {
            'has_game_board': self.find_game_board() is not None,
            'has_moves_counter': self.find_moves_counter() is not None,
            'has_score': self.find_score() is not None,
            'moves_count': self.get_moves_count(),
            'current_score': self.get_score(),
            'clickable_elements_count': len(self.get_all_clickable_elements())
        }
        
        print(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã:")
        print(f"   - –ï—Å—Ç—å –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ: {info['has_game_board']}")
        print(f"   - –ï—Å—Ç—å —Å—á–µ—Ç—á–∏–∫ —Ö–æ–¥–æ–≤: {info['has_moves_counter']}")
        print(f"   - –ï—Å—Ç—å —Å—á–µ—Ç: {info['has_score']}")
        print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤: {info['moves_count']}")
        print(f"   - –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: {info['current_score']}")
        print(f"   - –ö–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {info['clickable_elements_count']}")
        
        return info
