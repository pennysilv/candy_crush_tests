"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
"""

import time
import json
import os
from datetime import datetime
from appium.webdriver.common.appiumby import AppiumBy

def wait_and_screenshot(driver, name="screenshot", delay=2):
    """–ü–æ–¥–æ–∂–¥–∞—Ç—å –∏ —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç"""
    time.sleep(delay)
    timestamp = int(time.time())
    filename = f"reports/{name}_{timestamp}.png"
    driver.save_screenshot(filename)
    print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: {filename}")
    return filename

def find_element_with_text(driver, text, timeout=10):
    """–ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–µ–∫—Å—Ç"""
    xpath = f"//*[contains(@text, '{text}') or contains(@content-desc, '{text}')]"
    try:
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support import expected_conditions as EC
        
        wait = WebDriverWait(driver, timeout)
        element = wait.until(EC.presence_of_element_located((AppiumBy.XPATH, xpath)))
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º: {text}")
        return element
    except:
        print(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º '{text}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

def click_if_present(driver, xpath, timeout=5):
    """–ö–ª–∏–∫–Ω—É—Ç—å –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å"""
    try:
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support import expected_conditions as EC
        
        wait = WebDriverWait(driver, timeout)
        element = wait.until(EC.element_to_be_clickable((AppiumBy.XPATH, xpath)))
        element.click()
        print(f"‚úÖ –ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç: {xpath}")
        return True
    except:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å: {xpath}")
        return False

def get_all_clickable_info(driver):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö"""
    elements = driver.find_elements(AppiumBy.XPATH, "//*[@clickable='true']")
    info = []
    
    for i, element in enumerate(elements):
        try:
            element_info = {
                'index': i,
                'text': element.get_attribute('text') or '',
                'content_desc': element.get_attribute('content-desc') or '',
                'resource_id': element.get_attribute('resource-id') or '',
                'class': element.get_attribute('class') or '',
                'bounds': element.get_attribute('bounds') or ''
            }
            info.append(element_info)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ {i}: {e}")
    
    return info

def wait_for_screen_change(driver, initial_source, timeout=10):
    """–ñ–¥–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞"""
    start_time = time.time()
    
    while time.time() - start_time < timeout:
        current_source = driver.page_source
        if current_source != initial_source:
            print("‚úÖ –≠–∫—Ä–∞–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è")
            return True
        time.sleep(1)
    
    print("‚ùå –≠–∫—Ä–∞–Ω –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è")
    return False

def save_page_source(driver, name="page_source"):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    timestamp = int(time.time())
    filename = f"reports/{name}_{timestamp}.xml"
    
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(driver.page_source)
        print(f"üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        return filename
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞: {e}")
        return None

def swipe_screen(driver, direction="down"):
    """–°–≤–∞–π–ø –ø–æ —ç–∫—Ä–∞–Ω—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"""
    size = driver.get_window_size()
    
    if direction == "down":
        start_x = size['width'] // 2
        start_y = size['height'] * 0.8
        end_x = size['width'] // 2
        end_y = size['height'] * 0.2
    elif direction == "up":
        start_x = size['width'] // 2
        start_y = size['height'] * 0.2
        end_x = size['width'] // 2
        end_y = size['height'] * 0.8
    elif direction == "left":
        start_x = size['width'] * 0.8
        start_y = size['height'] // 2
        end_x = size['width'] * 0.2
        end_y = size['height'] // 2
    elif direction == "right":
        start_x = size['width'] * 0.2
        start_y = size['height'] // 2
        end_x = size['width'] * 0.8
        end_y = size['height'] // 2
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}")
        return False
    
    try:
        driver.swipe(start_x, start_y, end_x, end_y, 1000)
        print(f"‚úÖ –°–≤–∞–π–ø {direction} –≤—ã–ø–æ–ª–Ω–µ–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–≤–∞–π–ø–∞: {e}")
        return False

def tap_center(driver):
    """–¢–∞–ø –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞"""
    size = driver.get_window_size()
    center_x = size['width'] // 2
    center_y = size['height'] // 2
    
    try:
        driver.tap([(center_x, center_y)])
        print("‚úÖ –¢–∞–ø –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–∞–ø–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É: {e}")
        return False

def wait_for_element_disappear(driver, xpath, timeout=10):
    """–ñ–¥–∞—Ç—å –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞"""
    start_time = time.time()
    
    while time.time() - start_time < timeout:
        try:
            driver.find_element(AppiumBy.XPATH, xpath)
            time.sleep(1)  # –≠–ª–µ–º–µ–Ω—Ç –µ—â–µ –µ—Å—Ç—å, –∂–¥–µ–º
        except:
            print(f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç –∏—Å—á–µ–∑: {xpath}")
            return True
    
    print(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –∏—Å—á–µ–∑ –∑–∞ {timeout}—Å: {xpath}")
    return False

def create_test_report(test_name, results):
    """–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–µ"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"reports/test_report_{test_name}_{timestamp}.json"
    
    report = {
        'test_name': test_name,
        'timestamp': timestamp,
        'results': results
    }
    
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        print(f"üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        return filename
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        return None
