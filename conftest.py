import pytest
import time
import os
from appium import webdriver
from appium.options.android import UiAutomator2Options
from config.settings import APPIUM_CONFIG, TIMEOUTS

@pytest.fixture
def driver():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Android –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    options = UiAutomator2Options()
    options.platform_name = APPIUM_CONFIG['platform_name']
    options.app_package = APPIUM_CONFIG['app_package']
    options.app_activity = APPIUM_CONFIG['app_activity']
    options.automation_name = APPIUM_CONFIG['automation_name']
    options.new_command_timeout = APPIUM_CONFIG['new_command_timeout']
    options.no_reset = APPIUM_CONFIG['no_reset']
    options.full_reset = APPIUM_CONFIG['full_reset']
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Appium —Å–µ—Ä–≤–µ—Ä—É
    driver = webdriver.Remote(
        command_executor=APPIUM_CONFIG['server_url'],
        options=options
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ implicit wait
    driver.implicitly_wait(TIMEOUTS['implicit_wait'])
    
    # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    time.sleep(TIMEOUTS['app_launch_wait'])
    
    yield driver
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
    driver.quit()

@pytest.fixture(scope="session", autouse=True)
def setup_test_run():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("\nüéÆ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Candy Crush Saga!")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists("reports"):
        os.makedirs("reports")
    
    yield
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

@pytest.hookimpl(tryfirst=True, hookwrapper=True)
def pytest_runtest_makereport(item, call):
    """–•—É–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤"""
    outcome = yield
    rep = outcome.get_result()
    
    if rep.when == "call" and rep.failed:
        # –ü–æ–ª—É—á–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä—ã
        driver = item.funcargs.get('driver')
        if driver:
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞
            screenshot_name = f"FAILED_{item.name}_{int(time.time())}"
            screenshot_path = f"reports/{screenshot_name}.png"
            try:
                driver.save_screenshot(screenshot_path)
                print(f"\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path}")
            except Exception as e:
                print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç: {e}")
