"""
–¢–µ—Å—Ç—ã –≤–∏–∑—É–∞–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Candy Crush Saga
"""

import time
import pytest
from utils.helpers import wait_and_screenshot
from PIL import Image
import io

class TestVisualValidation:
    """–¢–µ—Å—Ç—ã –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    def test_main_screen_elements_present(self, driver):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ"""
        print("\nüëÅÔ∏è –¢–µ—Å—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞")
        
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        screenshot_path = wait_and_screenshot(driver, "main_screen_elements")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        screenshot_png = driver.get_screenshot_as_png()
        image = Image.open(io.BytesIO(screenshot_png))
        
        # –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        width, height = image.size
        
        print(f"üëÅÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–∑–º–µ—Ä–æ–º {width}x{height}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–æ–≤
        rgb_image = image.convert('RGB')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        visual_checks = {
            'not_blank': False,
            'has_colors': False,
            'reasonable_size': False,
            'not_mostly_black': False,
            'not_mostly_white': False
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
        if width > 0 and height > 0:
            visual_checks['not_blank'] = True
            print("   ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –†–∞–∑—É–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
        if width >= 480 and height >= 800:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
            visual_checks['reasonable_size'] = True
            print(f"   ‚úÖ –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ —Ä–∞–∑—É–º–Ω—ã–π: {width}x{height}")
        else:
            print(f"   ‚ö†Ô∏è –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–π: {width}x{height}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤ (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —É–≥–ª–∞–º –∏ —Ü–µ–Ω—Ç—Ä—É)
        sample_points = [
            (width//4, height//4),      # –õ–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π –∫–≤–∞–¥—Ä–∞–Ω—Ç
            (3*width//4, height//4),    # –ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π –∫–≤–∞–¥—Ä–∞–Ω—Ç
            (width//2, height//2),      # –¶–µ–Ω—Ç—Ä
            (width//4, 3*height//4),    # –õ–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π –∫–≤–∞–¥—Ä–∞–Ω—Ç
            (3*width//4, 3*height//4)   # –ü—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π –∫–≤–∞–¥—Ä–∞–Ω—Ç
        ]
        
        colors_found = []
        black_pixels = 0
        white_pixels = 0
        total_samples = len(sample_points)
        
        for x, y in sample_points:
            try:
                r, g, b = rgb_image.getpixel((x, y))
                colors_found.append((r, g, b))
                
                # –°—á–∏—Ç–∞–µ–º —á–µ—Ä–Ω—ã–µ –∏ –±–µ–ª—ã–µ –ø–∏–∫—Å–µ–ª–∏
                if r < 30 and g < 30 and b < 30:  # –ü–æ—á—Ç–∏ —á–µ—Ä–Ω—ã–π
                    black_pixels += 1
                elif r > 225 and g > 225 and b > 225:  # –ü–æ—á—Ç–∏ –±–µ–ª—ã–π
                    white_pixels += 1
                    
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∏–∫—Å–µ–ª—è ({x}, {y}): {e}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Ü–≤–µ—Ç–æ–≤
        unique_colors = len(set(colors_found))
        if unique_colors >= 3:
            visual_checks['has_colors'] = True
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {unique_colors} —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤")
        else:
            print(f"   ‚ö†Ô∏è –ú–∞–ª–æ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è: {unique_colors} —Ü–≤–µ—Ç–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç–∫—Ä–∞–Ω –Ω–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —á–µ—Ä–Ω—ã–π –∏–ª–∏ –±–µ–ª—ã–π
        if black_pixels < total_samples * 0.8:
            visual_checks['not_mostly_black'] = True
            print("   ‚úÖ –≠–∫—Ä–∞–Ω –Ω–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —á–µ—Ä–Ω—ã–π")
        else:
            print("   ‚ö†Ô∏è –≠–∫—Ä–∞–Ω –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —á–µ—Ä–Ω—ã–π")
        
        if white_pixels < total_samples * 0.8:
            visual_checks['not_mostly_white'] = True
            print("   ‚úÖ –≠–∫—Ä–∞–Ω –Ω–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –±–µ–ª—ã–π")
        else:
            print("   ‚ö†Ô∏è –≠–∫—Ä–∞–Ω –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –±–µ–ª—ã–π")
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–∞—Ö
        print(f"   üìä –û–±—Ä–∞–∑—Ü—ã —Ü–≤–µ—Ç–æ–≤: {colors_found[:3]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
        
        # –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        passed_checks = sum(visual_checks.values())
        total_checks = len(visual_checks)
        
        print(f"\nüìä –í–∏–∑—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: {passed_checks}/{total_checks}")
        
        for check_name, passed in visual_checks.items():
            status = "‚úÖ" if passed else "‚ùå"
            print(f"   {status} {check_name}")
        
        assert passed_checks >= 3, f"–ú–∏–Ω–∏–º—É–º 3 –∏–∑ {total_checks} –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏"
    
    def test_ui_elements_not_overlapping(self, driver):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ UI —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞"""
        print("\nüî≤ –¢–µ—Å—Ç –Ω–∞–ª–æ–∂–µ–Ω–∏—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        size = driver.get_window_size()
        
        # –î–µ–ª–∞–µ–º —Å–µ—Ä–∏—é —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ UI
        screenshots = []
        
        for i in range(3):
            print(f"   üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç {i+1}/3 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏")
            
            screenshot_path = wait_and_screenshot(driver, f"ui_stability_{i+1}")
            screenshot_png = driver.get_screenshot_as_png()
            screenshots.append(screenshot_png)
            
            # –ù–µ–±–æ–ª—å—à–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏
            if i < 2:
                driver.tap([(size['width']//2, size['height']//2)])
                time.sleep(1)
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ UI
        ui_stable = True
        
        if len(screenshots) >= 2:
            # –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
            sizes = [len(screenshot) for screenshot in screenshots]
            
            size_variation = max(sizes) - min(sizes)
            avg_size = sum(sizes) / len(sizes)
            variation_percent = (size_variation / avg_size) * 100
            
            print(f"   üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ UI:")
            print(f"      - –†–∞–∑–º–µ—Ä—ã —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {sizes}")
            print(f"      - –í–∞—Ä–∏–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞: {size_variation} –±–∞–π—Ç ({variation_percent:.1f}%)")
            
            if variation_percent < 10:  # –ú–µ–Ω–µ–µ 10% –≤–∞—Ä–∏–∞—Ü–∏–∏
                print("   ‚úÖ UI —Å—Ç–∞–±–∏–ª–µ–Ω –º–µ–∂–¥—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è–º–∏")
                ui_stable = True
            else:
                print("   ‚ö†Ô∏è –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è UI –º–µ–∂–¥—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è–º–∏")
                ui_stable = variation_percent < 25  # –î–æ–ø—É—Å–∫–∞–µ–º –¥–æ 25%
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
        current_size = driver.get_window_size()
        resolution_stable = current_size == size
        
        print(f"   üì± –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: {'‚úÖ' if resolution_stable else '‚ùå'}")
        
        # –¢–µ—Å—Ç –∑–æ–Ω —ç–∫—Ä–∞–Ω–∞ –Ω–∞ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å (–∫–æ—Å–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–æ–∂–µ–Ω–∏–π)
        zones_responsive = 0
        test_zones = [
            ("–í–µ—Ä—Ö–Ω—è—è –∑–æ–Ω–∞", size['width']//2, int(size['height']*0.2)),
            ("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞", size['width']//2, int(size['height']*0.5)),
            ("–ù–∏–∂–Ω—è—è –∑–æ–Ω–∞", size['width']//2, int(size['height']*0.8)),
            ("–õ–µ–≤–∞—è –∑–æ–Ω–∞", int(size['width']*0.2), size['height']//2),
            ("–ü—Ä–∞–≤–∞—è –∑–æ–Ω–∞", int(size['width']*0.8), size['height']//2),
        ]
        
        for zone_name, x, y in test_zones:
            try:
                driver.tap([(x, y)])
                time.sleep(0.5)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç
                test_size = driver.get_window_size()
                if test_size == size:
                    zones_responsive += 1
                    print(f"   ‚úÖ {zone_name}: –æ—Ç–∑—ã–≤—á–∏–≤–∞")
                else:
                    print(f"   ‚ö†Ô∏è {zone_name}: –∏–∑–º–µ–Ω–∏–ª—Å—è —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞")
                    
            except Exception as e:
                print(f"   ‚ùå {zone_name}: –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - {e}")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–æ–∂–µ–Ω–∏–π:")
        print(f"   - UI —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {'‚úÖ' if ui_stable else '‚ùå'}")
        print(f"   - –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: {'‚úÖ' if resolution_stable else '‚ùå'}")
        print(f"   - –û—Ç–∑—ã–≤—á–∏–≤—ã—Ö –∑–æ–Ω: {zones_responsive}/{len(test_zones)}")
        
        assert ui_stable, "UI –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–º"
        assert resolution_stable, "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–º"
        assert zones_responsive >= 3, "–ú–∏–Ω–∏–º—É–º 3 –∑–æ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∑—ã–≤—á–∏–≤—ã–º–∏"
    
    def test_screenshot_regression(self, driver):
        """–¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏"""
        print("\nüì∏ –¢–µ—Å—Ç —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–∏—é —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        reference_screenshots = []
        
        states_to_capture = [
            ("–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", lambda: None),
            ("–ü–æ—Å–ª–µ —Ç–∞–ø–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É", lambda: driver.tap([(size['width']//2, size['height']//2)])),
            ("–ü–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞", lambda: driver.tap([(size['width']//2, size['height']//2)])),
        ]
        
        size = driver.get_window_size()
        
        for state_name, action in states_to_capture:
            print(f"   üì∏ –ó–∞—Ö–≤–∞—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è: {state_name}")
            
            try:
                if action:
                    action()
                    time.sleep(2)  # –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
                
                screenshot_path = wait_and_screenshot(driver, f"regression_{state_name.lower().replace(' ', '_')}")
                screenshot_png = driver.get_screenshot_as_png()
                
                # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
                image = Image.open(io.BytesIO(screenshot_png))
                
                screenshot_info = {
                    'state': state_name,
                    'size': image.size,
                    'mode': image.mode,
                    'data_size': len(screenshot_png),
                    'path': screenshot_path
                }
                
                reference_screenshots.append(screenshot_info)
                
                print(f"      - –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image.size}")
                print(f"      - –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(screenshot_png)} –±–∞–π—Ç")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ {state_name}: {e}")
        
        # –ê–Ω–∞–ª–∏–∑ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        if len(reference_screenshots) >= 2:
            print(f"\nüìä –ê–Ω–∞–ª–∏–∑ {len(reference_screenshots)} —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤:")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ä–æ–≤
            sizes = [info['size'] for info in reference_screenshots]
            unique_sizes = list(set(sizes))
            
            if len(unique_sizes) == 1:
                print("   ‚úÖ –í—Å–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä")
                size_consistent = True
            else:
                print(f"   ‚ö†Ô∏è –†–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {unique_sizes}")
                size_consistent = False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö
            data_sizes = [info['data_size'] for info in reference_screenshots]
            avg_data_size = sum(data_sizes) / len(data_sizes)
            size_variation = (max(data_sizes) - min(data_sizes)) / avg_data_size
            
            print(f"   üìä –†–∞–∑–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö: {data_sizes}")
            print(f"   üìä –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: {avg_data_size:.0f} –±–∞–π—Ç")
            print(f"   üìä –í–∞—Ä–∏–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞: {size_variation:.1%}")
            
            data_reasonable = size_variation < 0.5  # –ú–µ–Ω–µ–µ 50% –≤–∞—Ä–∏–∞—Ü–∏–∏
            
            if data_reasonable:
                print("   ‚úÖ –†–∞–∑–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Ä–∞–∑—É–º–Ω—ã")
            else:
                print("   ‚ö†Ô∏è –ë–æ–ª—å—à–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è –≤ —Ä–∞–∑–º–µ—Ä–∞—Ö –¥–∞–Ω–Ω—ã—Ö")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –Ω–µ –ø—É—Å—Ç—ã–µ
            all_non_empty = all(info['data_size'] > 10000 for info in reference_screenshots)  # –ú–∏–Ω–∏–º—É–º 10KB
            
            if all_non_empty:
                print("   ‚úÖ –í—Å–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∞–Ω–Ω—ã–µ")
            else:
                print("   ‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–ª–∏—à–∫–æ–º –º–∞–ª—ã")
            
            assert size_consistent, "–†–∞–∑–º–µ—Ä—ã —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º–∏"
            assert all_non_empty, "–í—Å–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"
            
        else:
            assert False, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞—Ö–≤–∞—á–µ–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"
    
    def test_different_screen_resolutions(self, driver):
        """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏ —ç–∫—Ä–∞–Ω–∞"""
        print("\nüì± –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —ç–∫—Ä–∞–Ω–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        original_size = driver.get_window_size()
        print(f"üì± –ò—Å—Ö–æ–¥–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {original_size}")
        
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        original_screenshot = wait_and_screenshot(driver, "original_resolution")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ (–∫–æ—Å–≤–µ–Ω–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ)
        orientation_tests = []
        
        try:
            original_orientation = driver.orientation
            print(f"üì± –ò—Å—Ö–æ–¥–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {original_orientation}")
            
            # –ü—Ä–æ–±—É–µ–º —Å–º–µ–Ω–∏—Ç—å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
            new_orientation = "LANDSCAPE" if original_orientation == "PORTRAIT" else "PORTRAIT"
            
            print(f"üîÑ –ü—Ä–æ–±—É–µ–º —Å–º–µ–Ω–∏—Ç—å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –Ω–∞: {new_orientation}")
            driver.orientation = new_orientation
            time.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            new_size = driver.get_window_size()
            current_orientation = driver.orientation
            
            print(f"üì± –ù–æ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {new_size}")
            print(f"üì± –ù–æ–≤–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {current_orientation}")
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–æ–≤–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            new_screenshot = wait_and_screenshot(driver, "changed_resolution")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª–æ—Å—å
            resolution_changed = new_size != original_size
            orientation_changed = current_orientation != original_orientation
            
            orientation_test = {
                'attempted_orientation': new_orientation,
                'actual_orientation': current_orientation,
                'original_size': original_size,
                'new_size': new_size,
                'resolution_changed': resolution_changed,
                'orientation_changed': orientation_changed,
                'app_responsive': True
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –Ω–æ–≤–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
            try:
                driver.tap([(new_size['width']//2, new_size['height']//2)])
                time.sleep(1)
                test_size = driver.get_window_size()
                orientation_test['app_responsive'] = test_size == new_size
            except Exception as e:
                print(f"   ‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –≤ –Ω–æ–≤–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏: {e}")
                orientation_test['app_responsive'] = False
            
            orientation_tests.append(orientation_test)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
            print("üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é")
            driver.orientation = original_orientation
            time.sleep(2)
            
            final_size = driver.get_window_size()
            final_orientation = driver.orientation
            
            print(f"üì± –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {final_size}")
            print(f"üì± –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {final_orientation}")
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
            final_screenshot = wait_and_screenshot(driver, "restored_resolution")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é: {e}")
            print("   (–í–æ–∑–º–æ–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º)")
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            orientation_test = {
                'original_size': original_size,
                'current_size': driver.get_window_size(),
                'orientation_locked': True,
                'app_responsive': True
            }
            
            orientation_tests.append(orientation_test)
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:")
        
        for i, test in enumerate(orientation_tests):
            print(f"   –¢–µ—Å—Ç {i+1}:")
            
            if test.get('orientation_locked'):
                print("      - –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º")
                print(f"      - –†–∞–∑–º–µ—Ä –æ—Å—Ç–∞–ª—Å—è: {test['current_size']}")
            else:
                print(f"      - –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {test['original_size']}")
                print(f"      - –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {test['new_size']}")
                print(f"      - –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: {'‚úÖ' if test['resolution_changed'] else '‚ùå'}")
                print(f"      - –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: {'‚úÖ' if test['orientation_changed'] else '‚ùå'}")
            
            print(f"      - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∑—ã–≤—á–∏–≤–æ: {'‚úÖ' if test['app_responsive'] else '‚ùå'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–º
        try:
            final_check_size = driver.get_window_size()
            stability_check = final_check_size['width'] > 0 and final_check_size['height'] > 0
            
            if stability_check:
                print("   ‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–º –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
            else:
                print("   ‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
            
            assert stability_check, "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è —Å—Ç–∞–±–∏–ª—å–Ω—ã–º"
            
        except Exception as e:
            assert False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: {e}"
    
    def test_color_scheme_consistency(self, driver):
        """–¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã"""
        print("\nüé® –¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã")
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Ä–∞–∑–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–æ–≤
        color_analysis_states = [
            ("–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω", lambda: None),
            ("–ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ç–∞–ø–∞", lambda: driver.tap([(size['width']//2, int(size['height']*0.32))])),
            ("–ü–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ —Ç–∞–ø–∞", lambda: driver.tap([(size['width']//2, int(size['height']*0.42))])),
        ]
        
        size = driver.get_window_size()
        color_samples = []
        
        for state_name, action in color_analysis_states:
            print(f"   üé® –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤: {state_name}")
            
            try:
                if action:
                    action()
                    time.sleep(2)
                
                screenshot_png = driver.get_screenshot_as_png()
                image = Image.open(io.BytesIO(screenshot_png))
                rgb_image = image.convert('RGB')
                
                # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑—Ü—ã —Ü–≤–µ—Ç–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç–µ–π —ç–∫—Ä–∞–Ω–∞
                sample_points = [
                    (size['width']//4, size['height']//4),      # –í–µ—Ä—Ö-–ª–µ–≤–æ
                    (3*size['width']//4, size['height']//4),    # –í–µ—Ä—Ö-–ø—Ä–∞–≤–æ
                    (size['width']//2, size['height']//2),      # –¶–µ–Ω—Ç—Ä
                    (size['width']//4, 3*size['height']//4),    # –ù–∏–∑-–ª–µ–≤–æ
                    (3*size['width']//4, 3*size['height']//4),  # –ù–∏–∑-–ø—Ä–∞–≤–æ
                ]
                
                state_colors = []
                for x, y in sample_points:
                    try:
                        color = rgb_image.getpixel((x, y))
                        state_colors.append(color)
                    except:
                        pass
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Ü–≤–µ—Ç–æ–≤
                has_colorful_content = self._has_colorful_content(state_colors)
                has_game_colors = self._has_candy_crush_colors_flexible(state_colors)
                
                color_sample = {
                    'state': state_name,
                    'colors': state_colors,
                    'dominant_colors': self._get_dominant_colors(state_colors),
                    'has_game_colors': has_game_colors,
                    'has_colorful_content': has_colorful_content
                }
                
                color_samples.append(color_sample)
                
                print(f"      - –û–±—Ä–∞–∑—Ü–æ–≤ —Ü–≤–µ—Ç–æ–≤: {len(state_colors)}")
                print(f"      - –î–æ–º–∏–Ω–∞–Ω—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞: {color_sample['dominant_colors'][:3]}")  # –ü–µ—Ä–≤—ã–µ 3
                print(f"      - –ï—Å—Ç—å —Ü–≤–µ—Ç–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç: {'‚úÖ' if has_colorful_content else '‚ùå'}")
                print(f"      - –ï—Å—Ç—å –∏–≥—Ä–æ–≤—ã–µ —Ü–≤–µ—Ç–∞: {'‚úÖ' if has_game_colors else '‚ùå'}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                wait_and_screenshot(driver, f"color_analysis_{state_name.lower().replace(' ', '_')}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–æ–≤ {state_name}: {e}")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã
        if len(color_samples) >= 2:
            print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–æ–≤:")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–æ–ª–µ–µ –≥–∏–±–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
            states_with_game_colors = sum(1 for sample in color_samples if sample['has_game_colors'])
            states_with_colorful_content = sum(1 for sample in color_samples if sample['has_colorful_content'])
            
            print(f"   - –°–æ—Å—Ç–æ—è–Ω–∏–π —Å –∏–≥—Ä–æ–≤—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏: {states_with_game_colors}/{len(color_samples)}")
            print(f"   - –°–æ—Å—Ç–æ—è–Ω–∏–π —Å —Ü–≤–µ—Ç–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º: {states_with_colorful_content}/{len(color_samples)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–æ–º–∏–Ω–∞–Ω—Ç–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
            all_dominant_colors = []
            for sample in color_samples:
                all_dominant_colors.extend(sample['dominant_colors'])
            
            unique_dominant_colors = len(set(all_dominant_colors))
            total_dominant_colors = len(all_dominant_colors)
            
            print(f"   - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–æ–º–∏–Ω–∞–Ω—Ç–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤: {unique_dominant_colors}")
            print(f"   - –í—Å–µ–≥–æ –¥–æ–º–∏–Ω–∞–Ω—Ç–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤: {total_dominant_colors}")
            
            # –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ö–æ—Ä–æ—à–µ–π –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –¥–æ–º–∏–Ω–∞–Ω—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞
            consistency_ratio = 1 - (unique_dominant_colors / total_dominant_colors) if total_dominant_colors > 0 else 0
            
            print(f"   - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: {consistency_ratio:.2f}")
            
            if consistency_ratio >= 0.3:
                print("   ‚úÖ –•–æ—Ä–æ—à–∞—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã")
                color_consistency = True
            elif consistency_ratio >= 0.1:
                print("   ‚úÖ –£–º–µ—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã")
                color_consistency = True
            else:
                print("   ‚ö†Ô∏è –ù–∏–∑–∫–∞—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã")
                color_consistency = False
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï ASSERTIONS - –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã —Ü–≤–µ—Ç–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –ò–õ–ò –∏–≥—Ä–æ–≤—ã–µ —Ü–≤–µ—Ç–∞
            has_visual_content = states_with_game_colors >= 1 or states_with_colorful_content >= 2
            
            assert has_visual_content, f"–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–≤–µ—Ç–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö (–∏–≥—Ä–æ–≤—ã–µ —Ü–≤–µ—Ç–∞: {states_with_game_colors}, —Ü–≤–µ—Ç–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç: {states_with_colorful_content})"
            assert color_consistency, "–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π"
            
        else:
            assert False, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Å–æ—Å—Ç–æ—è–Ω–∏—è"
    
    def _get_dominant_colors(self, colors):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ–º–∏–Ω–∞–Ω—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        if not colors:
            return []
        
        # –ü—Ä–æ—Å—Ç–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Ü–≤–µ—Ç–æ–≤
        color_groups = {}
        for r, g, b in colors:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞ —Å –¥–æ–ø—É—Å–∫–æ–º ¬±30
            key = (r//30*30, g//30*30, b//30*30)
            if key not in color_groups:
                color_groups[key] = []
            color_groups[key].append((r, g, b))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ü–≤–µ—Ç–æ–≤
        sorted_groups = sorted(color_groups.items(), key=lambda x: len(x[1]), reverse=True)
        
        return [group[0] for group in sorted_groups[:5]]  # –¢–æ–ø 5 –¥–æ–º–∏–Ω–∞–Ω—Ç–Ω—ã—Ö
    
    def _has_colorful_content(self, colors):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ü–≤–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–Ω–µ —Ç–æ–ª—å–∫–æ —á–µ—Ä–Ω–æ-–±–µ–ª–æ–≥–æ)"""
        if not colors:
            return False
        
        colorful_pixels = 0
        
        for r, g, b in colors:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–≤–µ—Ç –Ω–µ —Å–µ—Ä—ã–π/—á–µ—Ä–Ω–æ-–±–µ–ª—ã–π
            is_grayscale = abs(r - g) < 30 and abs(g - b) < 30 and abs(r - b) < 30
            is_very_dark = r < 50 and g < 50 and b < 50
            is_very_light = r > 200 and g > 200 and b > 200
            
            if not is_grayscale and not is_very_dark and not is_very_light:
                colorful_pixels += 1
        
        # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã 30% –ø–∏–∫—Å–µ–ª–µ–π —Ü–≤–µ—Ç–Ω—ã–µ
        return colorful_pixels >= len(colors) * 0.3
    
    def _has_candy_crush_colors_flexible(self, colors):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ Candy Crush - –≥–∏–±–∫–∞—è –≤–µ—Ä—Å–∏—è"""
        if not colors:
            return False
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Ü–≤–µ—Ç–∞ —Å –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏
        color_ranges = [
            # –†–æ–∑–æ–≤—ã–µ/–∫—Ä–∞—Å–Ω—ã–µ —Ç–æ–Ω–∞
            {'min': (180, 50, 80), 'max': (255, 180, 200)},
            # –°–∏–Ω–∏–µ —Ç–æ–Ω–∞  
            {'min': (50, 100, 180), 'max': (150, 200, 255)},
            # –ñ–µ–ª—Ç—ã–µ/–∑–æ–ª–æ—Ç—ã–µ —Ç–æ–Ω–∞
            {'min': (200, 150, 50), 'max': (255, 255, 150)},
            # –ó–µ–ª–µ–Ω—ã–µ —Ç–æ–Ω–∞
            {'min': (80, 180, 80), 'max': (180, 255, 180)},
            # –§–∏–æ–ª–µ—Ç–æ–≤—ã–µ —Ç–æ–Ω–∞
            {'min': (100, 50, 150), 'max': (200, 150, 255)},
            # –û—Ä–∞–Ω–∂–µ–≤—ã–µ —Ç–æ–Ω–∞
            {'min': (200, 100, 50), 'max': (255, 180, 100)}
        ]
        
        matches = 0
        
        for r, g, b in colors:
            for color_range in color_ranges:
                min_r, min_g, min_b = color_range['min']
                max_r, max_g, max_b = color_range['max']
                
                if (min_r <= r <= max_r and 
                    min_g <= g <= max_g and 
                    min_b <= b <= max_b):
                    matches += 1
                    break  # –ù–∞–π–¥–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ü–≤–µ—Ç
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Ö–æ—Ç—è –±—ã 20% –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ü–≤–µ—Ç–æ–≤
        return matches >= len(colors) * 0.2
    
    def _has_candy_crush_colors(self, colors):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ Candy Crush - —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è"""
        if not colors:
            return False
        
        # –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Ü–≤–µ—Ç–∞ Candy Crush Saga
        candy_colors = [
            (255, 100, 150),  # –†–æ–∑–æ–≤—ã–π (–∫–Ω–æ–ø–∫–∞ Play)
            (100, 150, 255),  # –°–∏–Ω–∏–π (–∫–Ω–æ–ø–∫–∏)
            (255, 200, 100),  # –ó–æ–ª–æ—Ç–æ–π (–ª–æ–≥–æ—Ç–∏–ø)
            (100, 255, 150),  # –ó–µ–ª–µ–Ω—ã–π (—Ñ–æ–Ω)
            (150, 100, 255),  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π (–∫–æ–Ω—Ñ–µ—Ç—ã)
        ]
        
        for r, g, b in colors:
            for cr, cg, cb in candy_colors:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –¥–æ–ø—É—Å–∫–æ–º ¬±50
                if abs(r - cr) <= 50 and abs(g - cg) <= 50 and abs(b - cb) <= 50:
                    return True
        
        return False
