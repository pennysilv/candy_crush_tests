"""
–¢–µ—Å—Ç—ã —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Candy Crush Saga
"""

import time
import pytest
from utils.helpers import wait_and_screenshot

class TestAppStability:
    """–¢–µ—Å—Ç—ã —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def test_app_launches_successfully(self, driver):
        """–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç"""
        print("\nüöÄ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        
        # –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        wait_and_screenshot(driver, "app_launch_check")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        size = driver.get_window_size()
        page_source = driver.page_source
        
        print(f"üì± –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞: {size}")
        print(f"üìÑ –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(page_source)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—Å–∫–∞
        assert size['width'] > 0, "–®–∏—Ä–∏–Ω–∞ —ç–∫—Ä–∞–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"
        assert size['height'] > 0, "–í—ã—Å–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"
        assert len(page_source) > 1000, "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã
        try:
            driver.get_window_size()  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã")
        except Exception as e:
            assert False, f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {e}"
        
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ")
    
    def test_app_responds_to_basic_interactions(self, driver):
        """–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –±–∞–∑–æ–≤—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
        print("\nüëÜ –¢–µ—Å—Ç –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è")
        
        size = driver.get_window_size()
        interaction_count = 0
        successful_interactions = 0
        
        # –ù–∞–±–æ—Ä –±–∞–∑–æ–≤—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
        interactions = [
            ("–¶–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞", size['width']//2, size['height']//2),
            ("–í–µ—Ä—Ö —ç–∫—Ä–∞–Ω–∞", size['width']//2, int(size['height']*0.2)),
            ("–ù–∏–∑ —ç–∫—Ä–∞–Ω–∞", size['width']//2, int(size['height']*0.8)),
        ]
        
        for name, x, y in interactions:
            interaction_count += 1
            print(f"   üëÜ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ {interaction_count}: {name} ({x}, {y})")
            
            try:
                # –¢–∞–ø –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ
                driver.tap([(x, y)])
                time.sleep(1)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—Å–µ –µ—â–µ –æ—Ç–≤–µ—á–∞–µ—Ç
                driver.get_window_size()
                successful_interactions += 1
                print(f"   ‚úÖ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ {interaction_count} —É—Å–ø–µ—à–Ω–æ")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è {interaction_count}: {e}")
        
        wait_and_screenshot(driver, "after_basic_interactions")
        
        print(f"üìä –£—Å–ø–µ—à–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {successful_interactions}/{interaction_count}")
        assert successful_interactions >= 2, "–ú–∏–Ω–∏–º—É–º 2 –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º–∏"
    
    def test_app_handles_orientation_changes(self, driver):
        """–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–º–µ–Ω—É –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏"""
        print("\nüîÑ –¢–µ—Å—Ç —Å–º–µ–Ω—ã –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
        initial_orientation = driver.orientation
        initial_size = driver.get_window_size()
        
        print(f"üì± –ù–∞—á–∞–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {initial_orientation}")
        print(f"üì± –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {initial_size}")
        
        wait_and_screenshot(driver, "before_orientation_change")
        
        orientation_test_passed = True
        
        try:
            # –ü—Ä–æ–±—É–µ–º —Å–º–µ–Ω–∏—Ç—å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
            new_orientation = "LANDSCAPE" if initial_orientation == "PORTRAIT" else "PORTRAIT"
            
            print(f"üîÑ –ú–µ–Ω—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –Ω–∞: {new_orientation}")
            driver.orientation = new_orientation
            time.sleep(3)  # –ñ–¥–µ–º –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª–æ—Å—å
            new_size = driver.get_window_size()
            current_orientation = driver.orientation
            
            print(f"üì± –ù–æ–≤–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {current_orientation}")
            print(f"üì± –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {new_size}")
            
            wait_and_screenshot(driver, "after_orientation_change")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
            if new_orientation == "LANDSCAPE":
                assert new_size['width'] > new_size['height'], "–í –∞–ª—å–±–æ–º–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —à–∏—Ä–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –≤—ã—Å–æ—Ç—ã"
            else:
                assert new_size['height'] > new_size['width'], "–í –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –≤—ã—Å–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ —à–∏—Ä–∏–Ω—ã"
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
            driver.orientation = initial_orientation
            time.sleep(2)
            
            final_size = driver.get_window_size()
            print(f"üì± –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {final_size}")
            
            print("‚úÖ –°–º–µ–Ω–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é: {e}")
            print("   (–í–æ–∑–º–æ–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –∏–ª–∏ —Å–∏—Å—Ç–µ–º–æ–π)")
            orientation_test_passed = False
        
        wait_and_screenshot(driver, "orientation_test_final")
        
        # –ì–ª–∞–≤–Ω–æ–µ - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è —Å—Ç–∞–±–∏–ª—å–Ω—ã–º
        try:
            final_check_size = driver.get_window_size()
            assert final_check_size['width'] > 0, "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è —Å—Ç–∞–±–∏–ª—å–Ω—ã–º"
            print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–º –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏")
        except Exception as e:
            assert False, f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞–ª–æ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–º: {e}"
    
    def test_app_recovers_from_background(self, driver):
        """–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è"""
        print("\nüì± –¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ñ–æ–Ω–∞")
        
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ–º
        before_size = driver.get_window_size()
        before_screenshot = wait_and_screenshot(driver, "before_background")
        
        print("üì± –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ñ–æ–Ω")
        
        background_test_success = False
        
        try:
            # –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            driver.background_app(3)  # 3 —Å–µ–∫—É–Ω–¥—ã –≤ —Ñ–æ–Ω–µ
            print("   ‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç–æ –≤ —Ñ–æ–Ω –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã")
            
            # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è
            time.sleep(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å
            after_size = driver.get_window_size()
            after_screenshot = wait_and_screenshot(driver, "after_background")
            
            print(f"üì± –†–∞–∑–º–µ—Ä –¥–æ: {before_size}")
            print(f"üì± –†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ: {after_size}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–∑–º–µ—Ä—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
            assert after_size == before_size, "–†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è —Ç–µ–º –∂–µ"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç
            driver.page_source
            
            background_test_success = True
            print("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ñ–æ–Ω–∞ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–æ–Ω–∞: {e}")
            
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
            try:
                current_size = driver.get_window_size()
                if current_size['width'] > 0:
                    background_test_success = True
                    print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–ª–æ—Å—å –æ—Ç–∑—ã–≤—á–∏–≤—ã–º")
            except Exception as e2:
                print(f"‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {e2}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        try:
            final_size = driver.get_window_size()
            final_screenshot = wait_and_screenshot(driver, "background_test_final")
            
            assert final_size['width'] > 0, "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–º"
            
            if background_test_success:
                print("‚úÖ –¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ñ–æ–Ω–∞ –ø—Ä–æ–π–¥–µ–Ω")
            else:
                print("‚ö†Ô∏è –¢–µ—Å—Ç —Ñ–æ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–æ–π–¥–µ–Ω (–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ)")
                
        except Exception as e:
            assert False, f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ —Ñ–æ–Ω–∞: {e}"
    
    def test_memory_usage_stability(self, driver):
        """–¢–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        print("\nüíæ –¢–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏")
        
        memory_checks = []
        check_count = 5
        
        print(f"üíæ –í—ã–ø–æ–ª–Ω—è–µ–º {check_count} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–∞–º—è—Ç–∏ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º")
        
        for i in range(check_count):
            print(f"   üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ {i+1}/{check_count}")
            
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏
                size = driver.get_window_size()
                driver.tap([(size['width']//2, size['height']//2)])
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
                page_source_size = len(driver.page_source)
                
                memory_info = {
                    'check': i+1,
                    'page_source_size': page_source_size,
                    'screen_width': size['width'],
                    'screen_height': size['height'],
                    'timestamp': time.time()
                }
                
                memory_checks.append(memory_info)
                
                print(f"      üìä –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {page_source_size} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –°–∫—Ä–∏–Ω—à–æ—Ç –∫–∞–∂–¥—ã–µ 2 –ø—Ä–æ–≤–µ—Ä–∫–∏
                if i % 2 == 0:
                    wait_and_screenshot(driver, f"memory_check_{i+1}")
                
                time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–º—è—Ç–∏ {i+1}: {e}")
                memory_checks.append({
                    'check': i+1,
                    'error': str(e),
                    'timestamp': time.time()
                })
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        successful_checks = [check for check in memory_checks if 'error' not in check]
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–º—è—Ç–∏:")
        print(f"   - –£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {len(successful_checks)}/{check_count}")
        
        if len(successful_checks) >= 2:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ —Ä–∞—Å—Ç–µ—Ç —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ
            first_size = successful_checks[0]['page_source_size']
            last_size = successful_checks[-1]['page_source_size']
            growth = last_size - first_size
            
            print(f"   - –†–æ—Å—Ç —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {growth} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   - –ü–µ—Ä–≤—ã–π —Ä–∞–∑–º–µ—Ä: {first_size}")
            print(f"   - –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: {last_size}")
            
            # –¢–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç –µ—Å–ª–∏ –Ω–µ—Ç —á—Ä–µ–∑–º–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –ø–∞–º—è—Ç–∏
            assert growth < first_size, "–†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω —É–¥–≤–∞–∏–≤–∞—Ç—å—Å—è"
            print("‚úÖ –ü–∞–º—è—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω–æ")
        
        else:
            print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–º—è—Ç–∏")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        final_screenshot = wait_and_screenshot(driver, "memory_stability_final")
        
        assert len(successful_checks) >= check_count // 2, "–ú–∏–Ω–∏–º—É–º –ø–æ–ª–æ–≤–∏–Ω–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π"
