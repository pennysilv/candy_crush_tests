"""
–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Candy Crush Saga
"""

import time
import pytest
from utils.helpers import wait_and_screenshot

class TestPerformance:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def test_app_response_time(self, driver):
        """–¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
        print("\n‚ö° –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        
        size = driver.get_window_size()
        center_x = size['width'] // 2
        center_y = size['height'] // 2
        
        response_times = []
        test_actions = 5
        
        print(f"‚ö° –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ {test_actions} –¥–µ–π—Å—Ç–≤–∏–π")
        
        for i in range(test_actions):
            print(f"   ‚ö° –¢–µ—Å—Ç –æ—Ç–∫–ª–∏–∫–∞ {i+1}/{test_actions}")
            
            try:
                # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Ç–∞–ø–∞
                start_time = time.time()
                driver.tap([(center_x, center_y)])
                tap_time = time.time() - start_time
                
                # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞ (–æ—Ç–∫–ª–∏–∫ —Å–∏—Å—Ç–µ–º—ã)
                start_time = time.time()
                current_size = driver.get_window_size()
                system_response_time = time.time() - start_time
                
                total_response_time = tap_time + system_response_time
                response_times.append(total_response_time)
                
                print(f"      - –í—Ä–µ–º—è —Ç–∞–ø–∞: {tap_time:.3f}—Å")
                print(f"      - –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {system_response_time:.3f}—Å")
                print(f"      - –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_response_time:.3f}—Å")
                
                time.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –æ—Ç–∫–ª–∏–∫–∞ {i+1}: {e}")
        
        if response_times:
            avg_response = sum(response_times) / len(response_times)
            max_response = max(response_times)
            min_response = min(response_times)
            
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞:")
            print(f"   - –°—Ä–µ–¥–Ω–∏–π –æ—Ç–∫–ª–∏–∫: {avg_response:.3f}—Å")
            print(f"   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫: {max_response:.3f}—Å")
            print(f"   - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫: {min_response:.3f}—Å")
            print(f"   - –£—Å–ø–µ—à–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π: {len(response_times)}/{test_actions}")
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            assert avg_response < 2.0, f"–°—Ä–µ–¥–Ω–∏–π –æ—Ç–∫–ª–∏–∫ ({avg_response:.3f}—Å) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω–µ–µ 2 —Å–µ–∫—É–Ω–¥"
            assert max_response < 5.0, f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫ ({max_response:.3f}—Å) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥"
            
            if avg_response < 1.0:
                print("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (< 1—Å)")
            elif avg_response < 2.0:
                print("‚úÖ –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (< 2—Å)")
            else:
                print("‚ö†Ô∏è –ü—Ä–∏–µ–º–ª–µ–º–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        else:
            assert False, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞"
    
    def test_fps_during_interactions(self, driver):
        """–¢–µ—Å—Ç –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è—Ö"""
        print("\nüé¨ –¢–µ—Å—Ç –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–π")
        
        size = driver.get_window_size()
        
        # –°–µ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        interactions = [
            ("–¢–∞–ø –ø–æ —Ü–µ–Ω—Ç—Ä—É", lambda: driver.tap([(size['width']//2, size['height']//2)])),
            ("–°–≤–∞–π–ø –≤–≤–µ—Ä—Ö", lambda: driver.swipe(size['width']//2, int(size['height']*0.7), 
                                               size['width']//2, int(size['height']*0.3), 1000)),
            ("–°–≤–∞–π–ø –≤–Ω–∏–∑", lambda: driver.swipe(size['width']//2, int(size['height']*0.3), 
                                               size['width']//2, int(size['height']*0.7), 1000)),
        ]
        
        frame_check_results = []
        
        for interaction_name, action in interactions:
            print(f"\n   üé¨ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–≤–Ω–æ—Å—Ç–∏: {interaction_name}")
            
            try:
                before_screenshot = wait_and_screenshot(driver, f"fps_before_{interaction_name.lower().replace(' ', '_')}")
                
                # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
                start_time = time.time()
                action()
                action_time = time.time() - start_time
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π
                time.sleep(1)
                
                after_screenshot = wait_and_screenshot(driver, f"fps_after_{interaction_name.lower().replace(' ', '_')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
                response_start = time.time()
                current_size = driver.get_window_size()
                response_time = time.time() - response_start
                
                frame_data = {
                    'interaction': interaction_name,
                    'action_time': action_time,
                    'response_time': response_time,
                    'total_time': action_time + response_time,
                    'smooth': action_time < 1.0 and response_time < 0.5
                }
                
                frame_check_results.append(frame_data)
                
                print(f"      - –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è: {action_time:.3f}—Å")
                print(f"      - –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {response_time:.3f}—Å")
                print(f"      - –ü–ª–∞–≤–Ω–æ—Å—Ç—å: {'‚úÖ –ü–ª–∞–≤–Ω–æ' if frame_data['smooth'] else '‚ö†Ô∏è –ù–µ –æ—á–µ–Ω—å –ø–ª–∞–≤–Ω–æ'}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ {interaction_name}: {e}")
                frame_check_results.append({
                    'interaction': interaction_name,
                    'error': str(e),
                    'smooth': False
                })
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        smooth_interactions = [r for r in frame_check_results if r.get('smooth', False)]
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–ª–∞–≤–Ω–æ—Å—Ç–∏:")
        print(f"   - –ü–ª–∞–≤–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {len(smooth_interactions)}/{len(interactions)}")
        
        if smooth_interactions:
            avg_action_time = sum(r['action_time'] for r in smooth_interactions) / len(smooth_interactions)
            avg_response_time = sum(r['response_time'] for r in smooth_interactions) / len(smooth_interactions)
            
            print(f"   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏–π: {avg_action_time:.3f}—Å")
            print(f"   - –°—Ä–µ–¥–Ω–∏–π –æ—Ç–∫–ª–∏–∫: {avg_response_time:.3f}—Å")
            
            if len(smooth_interactions) == len(interactions):
                print("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø–ª–∞–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")
            elif len(smooth_interactions) >= len(interactions) // 2:
                print("‚úÖ –•–æ—Ä–æ—à–∞—è –ø–ª–∞–≤–Ω–æ—Å—Ç—å –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")
            else:
                print("‚ö†Ô∏è –ü–ª–∞–≤–Ω–æ—Å—Ç—å —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è")
        
        assert len(smooth_interactions) >= 1, "–ú–∏–Ω–∏–º—É–º –æ–¥–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–ª–∞–≤–Ω—ã–º"
    
    def test_memory_consumption(self, driver):
        """–¢–µ—Å—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã"""
        print("\nüíæ –¢–µ—Å—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏")
        
        memory_samples = []
        sample_count = 8
        
        print(f"üíæ –°–æ–±–∏—Ä–∞–µ–º {sample_count} –æ–±—Ä–∞–∑—Ü–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏")
        
        for i in range(sample_count):
            print(f"   üíæ –û–±—Ä–∞–∑–µ—Ü –ø–∞–º—è—Ç–∏ {i+1}/{sample_count}")
            
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                size = driver.get_window_size()
                driver.tap([(size['width']//2, size['height']//2)])
                
                # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ (–¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–µ—Ä–µ–∑ Appium)
                page_source_size = len(driver.page_source)
                
                # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏" —á–µ—Ä–µ–∑ —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                memory_sample = {
                    'sample': i+1,
                    'page_source_size': page_source_size,
                    'timestamp': time.time(),
                    'screen_dimensions': f"{size['width']}x{size['height']}"
                }
                
                memory_samples.append(memory_sample)
                
                print(f"      - –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {page_source_size} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –°–∫—Ä–∏–Ω—à–æ—Ç –∫–∞–∂–¥—ã–µ 3 –æ–±—Ä–∞–∑—Ü–∞
                if i % 3 == 0:
                    wait_and_screenshot(driver, f"memory_sample_{i+1}")
                
                time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–∑—Ü–∞–º–∏
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–∑—Ü–∞ –ø–∞–º—è—Ç–∏ {i+1}: {e}")
        
        if len(memory_samples) >= 3:
            # –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
            sizes = [sample['page_source_size'] for sample in memory_samples]
            
            initial_size = sizes[0]
            final_size = sizes[-1]
            max_size = max(sizes)
            min_size = min(sizes)
            avg_size = sum(sizes) / len(sizes)
            
            growth = final_size - initial_size
            growth_percent = (growth / initial_size) * 100 if initial_size > 0 else 0
            
            print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏:")
            print(f"   - –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {initial_size} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   - –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {final_size} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {min_size} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   - –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: {avg_size:.0f} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   - –†–æ—Å—Ç: {growth} —Å–∏–º–≤–æ–ª–æ–≤ ({growth_percent:+.1f}%)")
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
            memory_stable = abs(growth_percent) < 50  # –†–æ—Å—Ç –º–µ–Ω–µ–µ 50%
            no_significant_leaks = max_size < initial_size * 2  # –ù–µ –±–æ–ª–µ–µ —á–µ–º –≤ 2 —Ä–∞–∑–∞
            
            if memory_stable and no_significant_leaks:
                print("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ")
            elif memory_stable:
                print("‚úÖ –£–º–µ—Ä–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏")
            else:
                print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞–º—è—Ç—å—é")
            
            assert no_significant_leaks, "–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –ø–∞–º—è—Ç–∏"
            
        else:
            print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–º—è—Ç–∏")
            assert len(memory_samples) >= 2, "–ú–∏–Ω–∏–º—É–º 2 –æ–±—Ä–∞–∑—Ü–∞ –ø–∞–º—è—Ç–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–±—Ä–∞–Ω–æ"
    
    def test_network_usage(self, driver):
        """–¢–µ—Å—Ç —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("\nüåê –¢–µ—Å—Ç —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        
        # –ü–æ—Å–∫–æ–ª—å–∫—É –ø—Ä—è–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–∏ —á–µ—Ä–µ–∑ Appium –æ–≥—Ä–∞–Ω–∏—á–µ–Ω,
        # –º—ã —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
        
        network_tests = []
        test_duration = 15  # —Å–µ–∫—É–Ω–¥
        
        print(f"üåê –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Å–µ—Ç–µ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ {test_duration} —Å–µ–∫—É–Ω–¥")
        
        start_time = time.time()
        sample_interval = 3
        sample_count = 0
        
        while time.time() - start_time < test_duration:
            sample_count += 1
            print(f"   üåê –û–±—Ä–∞–∑–µ—Ü —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ {sample_count}")
            
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å —Å–µ—Ç–µ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                size = driver.get_window_size()
                
                # –¢–∞–ø –ø–æ –∫–Ω–æ–ø–∫–∞–º –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                driver.tap([(size['width']//2, int(size['height']*0.32))])  # Play button
                time.sleep(1)
                driver.tap([(size['width']//2, int(size['height']*0.42))])  # My Account
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å (–∫–æ—Å–≤–µ–Ω–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
                response_start = time.time()
                current_size = driver.get_window_size()
                page_source = driver.page_source
                response_time = time.time() - response_start
                
                network_sample = {
                    'sample': sample_count,
                    'response_time': response_time,
                    'content_size': len(page_source),
                    'timestamp': time.time() - start_time,
                    'responsive': response_time < 3.0
                }
                
                network_tests.append(network_sample)
                
                print(f"      - –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {response_time:.3f}—Å")
                print(f"      - –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(page_source)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"      - –û—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å: {'‚úÖ' if network_sample['responsive'] else '‚ö†Ô∏è'}")
                
                time.sleep(sample_interval)
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–∑—Ü–∞ —Å–µ—Ç–∏ {sample_count}: {e}")
                network_tests.append({
                    'sample': sample_count,
                    'error': str(e),
                    'responsive': False
                })
        
        # –ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        responsive_samples = [t for t in network_tests if t.get('responsive', False)]
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:")
        print(f"   - –û—Ç–∑—ã–≤—á–∏–≤—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤: {len(responsive_samples)}/{len(network_tests)}")
        
        if responsive_samples:
            avg_response = sum(t['response_time'] for t in responsive_samples) / len(responsive_samples)
            max_response = max(t['response_time'] for t in responsive_samples)
            
            print(f"   - –°—Ä–µ–¥–Ω–∏–π –æ—Ç–∫–ª–∏–∫: {avg_response:.3f}—Å")
            print(f"   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫: {max_response:.3f}—Å")
            
            if avg_response < 1.0:
                print("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Å–µ—Ç–µ–≤–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
            elif avg_response < 2.0:
                print("‚úÖ –•–æ—Ä–æ—à–∞—è —Å–µ—Ç–µ–≤–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
            else:
                print("‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω–∞—è —Å–µ—Ç–µ–≤–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        
        wait_and_screenshot(driver, "network_test_final")
        
        assert len(responsive_samples) >= len(network_tests) // 2, "–ú–∏–Ω–∏–º—É–º –ø–æ–ª–æ–≤–∏–Ω–∞ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–∑—ã–≤—á–∏–≤–æ–π"
    
    def test_intensive_usage_performance(self, driver):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏"""
        print("\nüî• –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏")
        
        size = driver.get_window_size()
        intensive_duration = 45  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 30 –¥–æ 45 —Å–µ–∫—É–Ω–¥
        actions_performed = 0
        performance_samples = []
        
        print(f"üî• –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ {intensive_duration} —Å–µ–∫—É–Ω–¥")
        
        start_time = time.time()
        
        while time.time() - start_time < intensive_duration:
            elapsed = int(time.time() - start_time)
            
            if elapsed % 5 == 0 and elapsed > 0:
                print(f"   üî• –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π —Ç–µ—Å—Ç: {elapsed}/{intensive_duration}—Å - –î–µ–π—Å—Ç–≤–∏–π: {actions_performed}")
            
            try:
                # –°–ª—É—á–∞–π–Ω—ã–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                import random
                
                action_start = time.time()
                
                action_type = random.choice(['tap', 'swipe', 'multi_tap'])
                
                if action_type == 'tap':
                    x = random.randint(int(size['width']*0.1), int(size['width']*0.9))
                    y = random.randint(int(size['height']*0.1), int(size['height']*0.9))
                    driver.tap([(x, y)])
                    actions_performed += 1
                    
                elif action_type == 'swipe':
                    start_x = random.randint(int(size['width']*0.2), int(size['width']*0.8))
                    start_y = random.randint(int(size['height']*0.2), int(size['height']*0.8))
                    end_x = random.randint(int(size['width']*0.2), int(size['width']*0.8))
                    end_y = random.randint(int(size['height']*0.2), int(size['height']*0.8))
                    driver.swipe(start_x, start_y, end_x, end_y, 500)
                    actions_performed += 1
                    
                elif action_type == 'multi_tap':
                    for _ in range(3):
                        x = random.randint(int(size['width']*0.3), int(size['width']*0.7))
                        y = random.randint(int(size['height']*0.3), int(size['height']*0.7))
                        driver.tap([(x, y)])
                        actions_performed += 1  # –°—á–∏—Ç–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–∞–ø –≤ multi_tap
                        time.sleep(0.05)  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 0.1 –¥–æ 0.05
                
                action_time = time.time() - action_start
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if actions_performed % 10 == 0:
                    perf_check_start = time.time()
                    current_size = driver.get_window_size()
                    perf_check_time = time.time() - perf_check_start
                    
                    performance_sample = {
                        'actions_count': actions_performed,
                        'elapsed_time': time.time() - start_time,
                        'action_time': action_time,
                        'perf_check_time': perf_check_time,
                        'stable': current_size == size
                    }
                    
                    performance_samples.append(performance_sample)
                
                time.sleep(0.05)  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 0.1 –¥–æ 0.05 –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ–π—Å—Ç–≤–∏–π
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è {actions_performed + 1}: {e}")
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                time.sleep(0.1)
        
        total_time = time.time() - start_time
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   - –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_time:.1f}—Å")
        print(f"   - –í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π: {actions_performed}")
        print(f"   - –°–∫–æ—Ä–æ—Å—Ç—å: {actions_performed/total_time:.1f} –¥–µ–π—Å—Ç–≤–∏–π/—Å–µ–∫")
        print(f"   - –û–±—Ä–∞–∑—Ü–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {len(performance_samples)}")
        
        if performance_samples:
            stable_samples = [s for s in performance_samples if s['stable']]
            avg_action_time = sum(s['action_time'] for s in performance_samples) / len(performance_samples)
            avg_perf_check = sum(s['perf_check_time'] for s in performance_samples) / len(performance_samples)
            
            print(f"   - –°—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {len(stable_samples)}/{len(performance_samples)}")
            print(f"   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è: {avg_action_time:.3f}—Å")
            print(f"   - –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {avg_perf_check:.3f}—Å")
            
            stability_rate = len(stable_samples) / len(performance_samples)
            
            if stability_rate >= 0.9:
                print("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏")
            elif stability_rate >= 0.7:
                print("‚úÖ –•–æ—Ä–æ—à–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏")
            else:
                print("‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏")
        
        wait_and_screenshot(driver, "intensive_usage_final")
        
        assert actions_performed >= 30, f"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –º–∏–Ω–∏–º—É–º 30 –¥–µ–π—Å—Ç–≤–∏–π, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {actions_performed}"
        assert total_time >= intensive_duration * 0.8, f"–¢–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å –º–∏–Ω–∏–º—É–º 80% –æ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ({intensive_duration * 0.8:.1f}—Å), –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–ª: {total_time:.1f}—Å"
