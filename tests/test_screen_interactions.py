"""
–¢–µ—Å—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —ç–∫—Ä–∞–Ω–æ–º Candy Crush Saga —á–µ—Ä–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
"""

import time
import pytest
from utils.helpers import wait_and_screenshot

class TestScreenInteractions:
    """–¢–µ—Å—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —ç–∫—Ä–∞–Ω–æ–º —á–µ—Ä–µ–∑ —Ç–∞–ø—ã –∏ –∂–µ—Å—Ç—ã"""
    
    def test_tap_main_play_button(self, driver):
        """–¢–∞–ø –ø–æ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–µ Play (—Ä–æ–∑–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞)"""
        print("\nüéØ –¢–µ—Å—Ç —Ç–∞–ø–∞ –ø–æ –∫–Ω–æ–ø–∫–µ Play")
        
        size = driver.get_window_size()
        
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–æ–∑–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ Play
        play_x = size['width'] // 2
        play_y = int(size['height'] * 0.32)
        
        print(f"üéØ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–Ω–æ–ø–∫–∏ Play: ({play_x}, {play_y})")
        
        # –°–∫—Ä–∏–Ω—à–æ—Ç –¥–æ —Ç–∞–ø–∞
        before_screenshot = wait_and_screenshot(driver, "before_play_tap")
        before_source = driver.page_source
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–∞–ø
            driver.tap([(play_x, play_y)])
            print("‚úÖ –¢–∞–ø –ø–æ –∫–Ω–æ–ø–∫–µ Play –≤—ã–ø–æ–ª–Ω–µ–Ω")
            
            time.sleep(3)  # –ñ–¥–µ–º —Ä–µ–∞–∫—Ü–∏–∏
            
            # –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ —Ç–∞–ø–∞
            after_screenshot = wait_and_screenshot(driver, "after_play_tap")
            after_source = driver.page_source
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
            if after_source != before_source:
                print("‚úÖ –≠–∫—Ä–∞–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è - –∫–Ω–æ–ø–∫–∞ Play —Ä–µ–∞–≥–∏—Ä—É–µ—Ç")
                screen_changed = True
            else:
                print("‚ö†Ô∏è –≠–∫—Ä–∞–Ω –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è - –≤–æ–∑–º–æ–∂–Ω–æ –∫–Ω–æ–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                screen_changed = False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ
            current_size = driver.get_window_size()
            assert current_size == size, "–†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è —Ç–µ–º –∂–µ"
            
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∞–ø–∞ –ø–æ Play: {'–†–µ–∞–≥–∏—Ä—É–µ—Ç' if screen_changed else '–ù–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç'}")
            
        except Exception as e:
            assert False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–∞–ø–µ –ø–æ –∫–Ω–æ–ø–∫–µ Play: {e}"
    
    def test_tap_secondary_buttons(self, driver):
        """–¢–µ—Å—Ç —Ç–∞–ø–æ–≤ –ø–æ –≤—Ç–æ—Ä–∏—á–Ω—ã–º –∫–Ω–æ–ø–∫–∞–º"""
        print("\nüéØ –¢–µ—Å—Ç —Ç–∞–ø–æ–≤ –ø–æ –≤—Ç–æ—Ä–∏—á–Ω—ã–º –∫–Ω–æ–ø–∫–∞–º")
        
        size = driver.get_window_size()
        
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        buttons = [
            ("–°–∏–Ω—è—è –∫–Ω–æ–ø–∫–∞ (My Account)", size['width']//2, int(size['height'] * 0.42)),
            ("–õ–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª (–ù–∞—Å—Ç—Ä–æ–π–∫–∏)", int(size['width'] * 0.1), int(size['height'] * 0.9)),
            ("–ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª", int(size['width'] * 0.9), int(size['height'] * 0.1)),
        ]
        
        successful_taps = 0
        
        for button_name, x, y in buttons:
            print(f"\n   üéØ –¢–∞–ø: {button_name} ({x}, {y})")
            
            try:
                before_screenshot = wait_and_screenshot(driver, f"before_{button_name.lower().replace(' ', '_')}")
                before_source = driver.page_source
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–∞–ø
                driver.tap([(x, y)])
                time.sleep(2)
                
                after_screenshot = wait_and_screenshot(driver, f"after_{button_name.lower().replace(' ', '_')}")
                after_source = driver.page_source
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
                if after_source != before_source:
                    print(f"   ‚úÖ {button_name}: —ç–∫—Ä–∞–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è")
                    reaction = "–†–µ–∞–≥–∏—Ä—É–µ—Ç"
                else:
                    print(f"   ‚ö†Ô∏è {button_name}: —ç–∫—Ä–∞–Ω –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")
                    reaction = "–ù–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç"
                
                successful_taps += 1
                print(f"   üìä {button_name}: {reaction}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–∞–ø–∞ {button_name}: {e}")
        
        print(f"\nüìä –£—Å–ø–µ—à–Ω—ã—Ö —Ç–∞–ø–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º: {successful_taps}/{len(buttons)}")
        assert successful_taps >= 2, "–ú–∏–Ω–∏–º—É–º 2 —Ç–∞–ø–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
    
    def test_swipe_gestures(self, driver):
        """–¢–µ—Å—Ç —Å–≤–∞–π–ø–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö"""
        print("\nüëÜ –¢–µ—Å—Ç –∂–µ—Å—Ç–æ–≤ —Å–≤–∞–π–ø–∞")
        
        size = driver.get_window_size()
        successful_swipes = 0
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–∞–π–ø–æ–≤
        swipes = [
            ("–í–≤–µ—Ä—Ö", size['width']//2, int(size['height']*0.7), size['width']//2, int(size['height']*0.3)),
            ("–í–Ω–∏–∑", size['width']//2, int(size['height']*0.3), size['width']//2, int(size['height']*0.7)),
            ("–í–ª–µ–≤–æ", int(size['width']*0.7), size['height']//2, int(size['width']*0.3), size['height']//2),
            ("–í–ø—Ä–∞–≤–æ", int(size['width']*0.3), size['height']//2, int(size['width']*0.7), size['height']//2),
        ]
        
        for direction, start_x, start_y, end_x, end_y in swipes:
            print(f"\n   üëÜ –°–≤–∞–π–ø {direction}: ({start_x},{start_y}) ‚Üí ({end_x},{end_y})")
            
            try:
                before_screenshot = wait_and_screenshot(driver, f"before_swipe_{direction.lower()}")
                before_source = driver.page_source
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–≤–∞–π–ø
                driver.swipe(start_x, start_y, end_x, end_y, 1000)
                time.sleep(2)
                
                after_screenshot = wait_and_screenshot(driver, f"after_swipe_{direction.lower()}")
                after_source = driver.page_source
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
                if after_source != before_source:
                    print(f"   ‚úÖ –°–≤–∞–π–ø {direction}: —ç–∫—Ä–∞–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è")
                    reaction = "–†–µ–∞–≥–∏—Ä—É–µ—Ç"
                else:
                    print(f"   ‚ö†Ô∏è –°–≤–∞–π–ø {direction}: —ç–∫—Ä–∞–Ω –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")
                    reaction = "–ù–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç"
                
                successful_swipes += 1
                print(f"   üìä –°–≤–∞–π–ø {direction}: –≤—ã–ø–æ–ª–Ω–µ–Ω, {reaction}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–≤–∞–π–ø–∞ {direction}: {e}")
        
        print(f"\nüìä –£—Å–ø–µ—à–Ω—ã—Ö —Å–≤–∞–π–ø–æ–≤: {successful_swipes}/{len(swipes)}")
        assert successful_swipes >= 3, "–ú–∏–Ω–∏–º—É–º 3 —Å–≤–∞–π–ø–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"
    
    def test_multi_touch_gestures(self, driver):
        """–¢–µ—Å—Ç –º—É–ª—å—Ç–∏—Ç–∞—á –∂–µ—Å—Ç–æ–≤ (–∑—É–º, –ø–∏–Ω—á)"""
        print("\nü§è –¢–µ—Å—Ç –º—É–ª—å—Ç–∏—Ç–∞—á –∂–µ—Å—Ç–æ–≤")
        
        size = driver.get_window_size()
        center_x = size['width'] // 2
        center_y = size['height'] // 2
        
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∂–µ—Å—Ç–æ–≤ –∑—É–º–∞
        zoom_distance = min(size['width'], size['height']) // 4
        
        multitouch_tests = [
            ("Zoom In (—Ä–∞–∑–≤–µ–¥–µ–Ω–∏–µ –ø–∞–ª—å—Ü–µ–≤)", 
             [(center_x - 50, center_y), (center_x + 50, center_y)],
             [(center_x - zoom_distance, center_y), (center_x + zoom_distance, center_y)]
            ),
            ("Zoom Out (—Å–≤–µ–¥–µ–Ω–∏–µ –ø–∞–ª—å—Ü–µ–≤)",
             [(center_x - zoom_distance, center_y), (center_x + zoom_distance, center_y)], 
             [(center_x - 50, center_y), (center_x + 50, center_y)]
            ),
        ]
        
        successful_multitouch = 0
        
        for gesture_name, start_points, end_points in multitouch_tests:
            print(f"\n   ü§è {gesture_name}")
            
            try:
                before_screenshot = wait_and_screenshot(driver, f"before_{gesture_name.lower().replace(' ', '_')}")
                before_source = driver.page_source
                
                # –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º—É–ª—å—Ç–∏—Ç–∞—á –∂–µ—Å—Ç
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —ç–º—É–ª—è—Ü–∏—é —á–µ—Ä–µ–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–∞–ø—ã
                    for point in start_points:
                        driver.tap([point])
                        time.sleep(0.1)
                    
                    time.sleep(1)
                    
                    for point in end_points:
                        driver.tap([point])
                        time.sleep(0.1)
                    
                    print(f"   ‚úÖ {gesture_name}: –∂–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω")
                    
                except Exception as gesture_error:
                    print(f"   ‚ö†Ô∏è {gesture_name}: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥")
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –ø—Ä–æ—Å—Ç–æ —Ç–∞–ø –ø–æ —Ü–µ–Ω—Ç—Ä—É
                    driver.tap([(center_x, center_y)])
                
                time.sleep(2)
                
                after_screenshot = wait_and_screenshot(driver, f"after_{gesture_name.lower().replace(' ', '_')}")
                after_source = driver.page_source
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–º
                current_size = driver.get_window_size()
                if current_size == size:
                    successful_multitouch += 1
                    print(f"   ‚úÖ {gesture_name}: –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ")
                else:
                    print(f"   ‚ö†Ô∏è {gesture_name}: –∏–∑–º–µ–Ω–∏–ª—Å—è —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ {gesture_name}: {e}")
        
        print(f"\nüìä –£—Å–ø–µ—à–Ω—ã—Ö –º—É–ª—å—Ç–∏—Ç–∞—á –∂–µ—Å—Ç–æ–≤: {successful_multitouch}/{len(multitouch_tests)}")
        assert successful_multitouch >= 1, "–ú–∏–Ω–∏–º—É–º 1 –º—É–ª—å—Ç–∏—Ç–∞—á –∂–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω"
    
    def test_screen_zones_responsiveness(self, driver):
        """–¢–µ—Å—Ç –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–æ–Ω —ç–∫—Ä–∞–Ω–∞"""
        print("\nüìç –¢–µ—Å—Ç –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏ –∑–æ–Ω —ç–∫—Ä–∞–Ω–∞")
        
        size = driver.get_window_size()
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —ç–∫—Ä–∞–Ω –Ω–∞ –∑–æ–Ω—ã (—Å–µ—Ç–∫–∞ 3x3)
        zones = []
        for row in range(3):
            for col in range(3):
                x = int(size['width'] * (0.2 + col * 0.3))
                y = int(size['height'] * (0.2 + row * 0.3))
                zone_name = f"–ó–æ–Ω–∞_{row+1}_{col+1}"
                zones.append((zone_name, x, y))
        
        responsive_zones = 0
        
        for zone_name, x, y in zones:
            print(f"\n   üìç {zone_name}: ({x}, {y})")
            
            try:
                before_source = driver.page_source
                
                # –ë—ã—Å—Ç—Ä—ã–π —Ç–∞–ø –ø–æ –∑–æ–Ω–µ
                driver.tap([(x, y)])
                time.sleep(0.5)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç
                after_source = driver.page_source
                current_size = driver.get_window_size()
                
                if current_size == size:
                    responsive_zones += 1
                    
                    if after_source != before_source:
                        print(f"   ‚úÖ {zone_name}: –æ—Ç–∑—ã–≤—á–∏–≤–∞, —ç–∫—Ä–∞–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è")
                        status = "–†–µ–∞–≥–∏—Ä—É–µ—Ç"
                    else:
                        print(f"   ‚úÖ {zone_name}: –æ—Ç–∑—ã–≤—á–∏–≤–∞, —ç–∫—Ä–∞–Ω —Å—Ç–∞–±–∏–ª–µ–Ω")
                        status = "–°—Ç–∞–±–∏–ª—å–Ω–∞"
                else:
                    print(f"   ‚ö†Ô∏è {zone_name}: –∏–∑–º–µ–Ω–∏–ª—Å—è —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞")
                    status = "–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞"
                    
                print(f"   üìä {zone_name}: {status}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–æ–Ω—ã {zone_name}: {e}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
        wait_and_screenshot(driver, "screen_zones_final")
        
        print(f"\nüìä –û—Ç–∑—ã–≤—á–∏–≤—ã—Ö –∑–æ–Ω: {responsive_zones}/{len(zones)}")
        print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞: {(responsive_zones/len(zones))*100:.1f}%")
        
        assert responsive_zones >= len(zones) // 2, "–ú–∏–Ω–∏–º—É–º –ø–æ–ª–æ–≤–∏–Ω–∞ –∑–æ–Ω –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–∑—ã–≤—á–∏–≤–æ–π"
    
    def test_rapid_tap_sequence(self, driver):
        """–¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–∞–ø–æ–≤"""
        print("\n‚ö° –¢–µ—Å—Ç –±—ã—Å—Ç—Ä—ã—Ö —Ç–∞–ø–æ–≤")
        
        size = driver.get_window_size()
        center_x = size['width'] // 2
        center_y = size['height'] // 2
        
        tap_count = 10
        successful_taps = 0
        
        print(f"‚ö° –í—ã–ø–æ–ª–Ω—è–µ–º {tap_count} –±—ã—Å—Ç—Ä—ã—Ö —Ç–∞–ø–æ–≤ –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞")
        
        before_screenshot = wait_and_screenshot(driver, "before_rapid_taps")
        start_time = time.time()
        
        for i in range(tap_count):
            try:
                driver.tap([(center_x, center_y)])
                successful_taps += 1
                time.sleep(0.1)  # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–∞–ø–∞–º–∏
                
                if i % 3 == 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π 3-–π —Ç–∞–ø
                    current_size = driver.get_window_size()
                    if current_size != size:
                        print(f"   ‚ö†Ô∏è –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ —Ç–∞–ø–µ {i+1}")
                        break
                        
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Ç–∞–ø–µ {i+1}: {e}")
                break
        
        total_time = time.time() - start_time
        after_screenshot = wait_and_screenshot(driver, "after_rapid_taps")
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ã—Å—Ç—Ä—ã—Ö —Ç–∞–ø–æ–≤:")
        print(f"   - –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç–∞–ø–æ–≤: {successful_taps}/{tap_count}")
        print(f"   - –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"   - –°–∫–æ—Ä–æ—Å—Ç—å: {successful_taps/total_time:.1f} —Ç–∞–ø–æ–≤/—Å–µ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
        try:
            final_size = driver.get_window_size()
            assert final_size == size, "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è —Å—Ç–∞–±–∏–ª—å–Ω—ã–º"
            print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ –ø–æ—Å–ª–µ –±—ã—Å—Ç—Ä—ã—Ö —Ç–∞–ø–æ–≤")
        except Exception as e:
            assert False, f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ –ø–æ—Å–ª–µ –±—ã—Å—Ç—Ä—ã—Ö —Ç–∞–ø–æ–≤: {e}"
        
        assert successful_taps >= tap_count // 2, "–ú–∏–Ω–∏–º—É–º –ø–æ–ª–æ–≤–∏–Ω–∞ —Ç–∞–ø–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
